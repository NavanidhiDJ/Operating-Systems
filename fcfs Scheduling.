struct Process{
    int pid;
    int arrival;
    int burst;
    int completion;
    int turnaround;
    int waiting;
};

void sortByArrival(struct Process p[], int n){
    for (int i=0;i<n-1;i++){
        for (int j=0;j<n-i-1;j++){
            if (p[j].arrival>p[j+1].arrival){
                struct Process temp=p[j];
                p[j]=p[j+1];
                p[j+1]=temp;
            }
        }
    }
}

void fcfsScheduling(struct Process p[], int n){
    int totalturnaround=0 , totalwaiting=0 ;
    p[0].completion=p[0].arrival+p[0].burst;
    p[0].turnaround=p[0].completion-p[0].arrival;
    p[0].waiting=p[0].turnaround-p[0].burst;
    totalturnaround +=p[0].turnaround;
    totalwaiting +=p[0].waiting;
    p[0].pid=1;

    for (int i=1;i<n ;i++){
        if (p[i].arrival>p[i-1].completion){
            p[i].completion=p[i].arrival+p[i].burst;
        }
        else {
            p[i].completion=p[i-1].completion+p[i].burst;
        }

        p[i].pid=i+1;
        p[i].turnaround=p[i].completion-p[i].arrival;
        p[i].waiting=p[i].turnaround-p[i].burst;
        totalturnaround +=p[i].turnaround;
        totalwaiting +=p[i].waiting;
    }

    printf("\nProcess details:\n");
    printf("\nProcess\tArrival\tBurst\tComp\tTA\tWait\n");

    for (int i=0;i<n;i++){
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",p[i].pid,p[i].arrival,p[i].burst,p[i].completion,p[i].turnaround,p[i].waiting);
    }
    printf("average turn around time:%.2f\n",(float)totalturnaround/n);

    printf("average waiting time:%.2f\n",(float)totalwaiting/n);

}
int main(){
    int n;
    printf("enter the number of process:");
    scanf("%d",&n);
    struct Process p[n];

    printf("the process details:\n");

    for (int i=0;i<n;i++){
        printf("enter the arrival and burst time of the process %d:",i+1);
        scanf("%d%d",&p[i].arrival,&p[i].burst);
    }

    sortByArrival(p,n);

    fcfsScheduling(p,n);

    return 0;
}
