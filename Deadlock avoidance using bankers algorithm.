#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int n, m; // Number of processes and resources
int alloc[MAX_PROCESSES][MAX_RESOURCES];   // Allocation Matrix
int max[MAX_PROCESSES][MAX_RESOURCES];     // Maximum Demand Matrix
int need[MAX_PROCESSES][MAX_RESOURCES];    // Need Matrix
int avail[MAX_RESOURCES];                  // Available Resources
int safeSeq[MAX_PROCESSES];                // Safe sequence
bool finish[MAX_PROCESSES];                // Finish flags

// Input matrices from the user
void input() {
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    printf("Enter Allocation Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    printf("Enter Maximum Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("Enter Available Resources: ");
    for (int j = 0; j < m; j++) {
        scanf("%d", &avail[j]);
    }
}

// Calculate the need matrix = max - alloc
void calculateNeed() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

// Check if the system is in a safe state
bool isSafeState() {
    int work[MAX_RESOURCES];
    int count = 0;

    for (int j = 0; j < m; j++) {
        work[j] = avail[j];
    }

    for (int i = 0; i < n; i++) {
        finish[i] = false;
    }

    while (count < n) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                bool canAllocate = true;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        canAllocate = false;
                        break;
                    }
                }

                if (canAllocate) {
                    for (int j = 0; j < m; j++) {
                        work[j] += alloc[i][j];
                    }
                    safeSeq[count++] = i;
                    finish[i] = true;
                    found = true;
                }
            }
        }

        if (!found) {
            return false; // Not safe
        }
    }

    return true; // Safe
}

// Display the safe sequence
void printSafeSequence() {
    printf("System is in a SAFE state.\nSafe sequence is: ");
    for (int i = 0; i < n; i++) {
        printf("P%d", safeSeq[i]);
        if (i != n - 1) printf(" -> ");
    }
    printf("\n");
}

// Main
int main() {
    input();
    calculateNeed();

    if (isSafeState()) {
        printSafeSequence();
    } else {
        printf("System is in an UNSAFE state. Deadlock may occur.\n");
    }

    return 0;
}
