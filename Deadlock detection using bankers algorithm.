#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int alloc[MAX_PROCESSES][MAX_RESOURCES];
int request[MAX_PROCESSES][MAX_RESOURCES];
int avail[MAX_RESOURCES];
bool finish[MAX_PROCESSES];
int n, m;

void input() {
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    printf("Enter Allocation Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    printf("Enter Request Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d: ", i);
        for (int j = 0; j < m; j++) {
            scanf("%d", &request[i][j]);
        }
    }

    printf("Enter Available Resources: ");
    for (int j = 0; j < m; j++) {
        scanf("%d", &avail[j]);
    }
}

void detectDeadlock() {
    int work[MAX_RESOURCES];
    for (int j = 0; j < m; j++) {
        work[j] = avail[j];
    }

    for (int i = 0; i < n; i++) {
        bool allZero = true;
        for (int j = 0; j < m; j++) {
            if (alloc[i][j] != 0) {
                allZero = false;
                break;
            }
        }
        finish[i] = allZero;
    }

    bool progress = true;
    while (progress) {
        progress = false;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                bool canSatisfy = true;
                for (int j = 0; j < m; j++) {
                    if (request[i][j] > work[j]) {
                        canSatisfy = false;
                        break;
                    }
                }
                if (canSatisfy) {
                    for (int j = 0; j < m; j++) {
                        work[j] += alloc[i][j];
                    }
                    finish[i] = true;
                    progress = true;
                }
            }
        }
    }

    // Print results
    bool deadlock = false;
    printf("Deadlock Detection Result:\n");
    for (int i = 0; i < n; i++) {
        if (!finish[i]) {
            printf("Process P%d is in deadlock.\n", i);
            deadlock = true;
        }
    }

    if (!deadlock) {
        printf("No deadlock detected. System is in a safe state.\n");
    }
}

int main() {
    input();
    detectDeadlock();
    return 0;
}
