#include <stdio.h>
#include <stdbool.h>

#define MAX 10

int alloc[MAX][MAX], req[MAX][MAX], avail[MAX];
bool finish[MAX];
int n, m;

// Function to take input
void input() {
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resource types: ");
    scanf("%d", &m);

    printf("Enter Allocation Matrix (%d x %d):\n", n, m);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter Request Matrix (%d x %d):\n", n, m); // Remaining need
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            scanf("%d", &req[i][j]);

    printf("Enter Available Resources (%d):\n", m);
    for (int i = 0; i < m; i++)
        scanf("%d", &avail[i]);
}

// Function to check if a process can finish
bool canFinish(int i) {
    for (int j = 0; j < m; j++) {
        if (req[i][j] > avail[j])
            return false;
    }
    return true;
}

// Function to perform deadlock detection
void detectDeadlock() {
    for (int i = 0; i < n; i++)
        finish[i] = false;

    int changed;
    do {
        changed = 0;
        for (int i = 0; i < n; i++) {
            if (!finish[i] && canFinish(i)) {
                for (int j = 0; j < m; j++)
                    avail[j] += alloc[i][j];
                finish[i] = true;
                changed = 1;
            }
        }
    } while (changed);
}

// Function to print result
void printResult() {
    int deadlock = 0;
    printf("\nDeadlocked Processes:\n");
    for (int i = 0; i < n; i++) {
        if (!finish[i]) {
            printf("P%d ", i);
            deadlock = 1;
        }
    }

    if (!deadlock)
        printf("None. No deadlock detected.\n");
    else
        printf("\nDeadlock found!\n");
}

int main() {
    input();
    detectDeadlock();
    printResult();
    return 0;
}
