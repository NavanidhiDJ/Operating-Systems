#include <stdio.h>
#include <limits.h>

// Function to check if page is in frame
int isInFrame(int frames[], int frameCount, int page) {
    for (int i = 0; i < frameCount; i++) {
        if (frames[i] == page)
            return 1;
    }
    return 0;
}

// FIFO Page Replacement
void fifo(int pages[], int n, int frameCount) {
    int frames[frameCount];
    int index = 0, pageFaults = 0;

    for (int i = 0; i < frameCount; i++) frames[i] = -1;

    printf("\nFIFO:\n");

    for (int i = 0; i < n; i++) {
        if (!isInFrame(frames, frameCount, pages[i])) {
            frames[index] = pages[i];
            index = (index + 1) % frameCount;
            pageFaults++;
        }
        printf("Frames: ");
        for (int j = 0; j < frameCount; j++) printf("%2d ", frames[j]);
        printf("\n");
    }

    printf("Total Page Faults (FIFO): %d\n", pageFaults);
}

// Find LRU index
int findLRU(int time[], int frameCount) {
    int min = time[0], pos = 0;
    for (int i = 1; i < frameCount; i++) {
        if (time[i] < min) {
            min = time[i];
            pos = i;
        }
    }
    return pos;
}

// LRU Page Replacement
void lru(int pages[], int n, int frameCount) {
    int frames[frameCount], time[frameCount];
    int count = 0, pageFaults = 0;

    for (int i = 0; i < frameCount; i++) frames[i] = -1;

    printf("\nLRU:\n");

    for (int i = 0; i < n; i++) {
        if (isInFrame(frames, frameCount, pages[i])) {
            for (int j = 0; j < frameCount; j++)
                if (frames[j] == pages[i])
                    time[j] = ++count;
        } else {
            int pos = -1;
            for (int j = 0; j < frameCount; j++) {
                if (frames[j] == -1) {
                    pos = j;
                    break;
                }
            }
            if (pos == -1) pos = findLRU(time, frameCount);

            frames[pos] = pages[i];
            time[pos] = ++count;
            pageFaults++;
        }
        printf("Frames: ");
        for (int j = 0; j < frameCount; j++) printf("%2d ", frames[j]);
        printf("\n");
    }

    printf("Total Page Faults (LRU): %d\n", pageFaults);
}

// Find optimal index to replace
int findOptimal(int pages[], int frames[], int n, int index, int frameCount) {
    int farthest = -1, pos = -1;

    for (int i = 0; i < frameCount; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }
        }
        if (j == n) return i;
    }
    return pos;
}

// Optimal Page Replacement
void optimal(int pages[], int n, int frameCount) {
    int frames[frameCount];
    int pageFaults = 0;

    for (int i = 0; i < frameCount; i++) frames[i] = -1;

    printf("\nOptimal:\n");

    for (int i = 0; i < n; i++) {
        if (!isInFrame(frames, frameCount, pages[i])) {
            int pos = -1;
            for (int j = 0; j < frameCount; j++) {
                if (frames[j] == -1) {
                    pos = j;
                    break;
                }
            }
            if (pos == -1)
                pos = findOptimal(pages, frames, n, i + 1, frameCount);

            frames[pos] = pages[i];
            pageFaults++;
        }

        printf("Frames: ");
        for (int j = 0; j < frameCount; j++) printf("%2d ", frames[j]);
        printf("\n");
    }

    printf("Total Page Faults (Optimal): %d\n", pageFaults);
}

int main() {
    int n, frameCount;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    int pages[n];
    printf("Enter page reference string: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    printf("Enter number of frames: ");
    scanf("%d", &frameCount);

    fifo(pages, n, frameCount);
    lru(pages, n, frameCount);
    optimal(pages, n, frameCount);

    return 0;
}
