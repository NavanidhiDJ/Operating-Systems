#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>

#define N 5

enum {THINKING , HUNGRY , EATING} state[N];
int phil[N]={0,1,2,3,4};

sem_t mutex;
sem_t S[N];

void test(int i){
    if (state[i]==HUNGRY && state[(i+4)%N]!=EATING && state[(i+1)%N]!=EATING){
        state[i]=EATING;
        sleep(1);

        printf("Philosopher %d takes %d and %d forks.\n",i,(i+4)%N,i);
        printf("Philosopler %d is eating.\n",i);
        sem_post(&S[i]);
    }
}

void take_fork(int i){
    sem_wait(&mutex);
    state[i]=HUNGRY;
    printf("Philosopher %d is hungry.\n",i);
    test(i);
    sem_post(&mutex);
    sem_wait(&S[i]);
}

void put_fork(int i){
    sem_wait(&mutex);
    state[i]=THINKING;
    printf("Philosopher %d puts down %d and %d forks.\n",i,(i+4)%N,i);
    printf("Philosopher %d is thinking.\n",i);
    test((i+4)%N);
    test((i+1)%N);
    sem_post(&mutex);
}

void *philosopher(void *num){
    int i=*(int*)num;

    while (1){
        sleep(1);
        take_fork(i);
        sleep(2);
        put_fork(i);
    }
}

int main(){
    int i;
    pthread_t tid[N];

    sem_init(&mutex,0,1);

    for (i=0;i<N;i++)
        sem_init(&S[i],0,0);
    for(i=0;i<N;i++)
        pthread_create(&tid[i],NULL,philosopher,&phil[i]);
    for (i=0;i<N;i++)
        pthread_join(tid[i],NULL);
}
